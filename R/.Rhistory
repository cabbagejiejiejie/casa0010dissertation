merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G1_G2 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G1 / total_G1) * (weighted_density_G2 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G1_G3
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G1_G3 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G1 / total_G1) * (weighted_density_G3 / weighted_density_all)
)
)
# G2
total_G2 <- sum(merged_data_lsoa$G2, na.rm = TRUE)
# 使用矢量化方法计算 local_p_G2_G1
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G2_G1 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G2 / total_G2) * (weighted_density_G1 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G2_G3
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G2_G3 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G2 / total_G2) * (weighted_density_G3 / weighted_density_all)
)
)
# G3
total_G3 <- sum(merged_data_lsoa$G3, na.rm = TRUE)
# 使用矢量化方法计算 local_p_G3_G1
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G3_G1 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G3 / total_G3) * (weighted_density_G1 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G3_G2
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G3_G2 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G3 / total_G3) * (weighted_density_G2 / weighted_density_all)
)
)
df <- st_drop_geometry(merged_data_lsoa)
write_csv(df, "local_d_age.csv")
london_borough <- st_read("data/borough/London_Borough_Excluding_MHW.shp")
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_d_index), color = NA) +  # 去掉边界线
# 叠加 london_borough 的边界
geom_sf(data = london_borough, fill = NA, color = "black", size = 0.5) +
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
library(sf)
library(readr)
library(dplyr)
library(spdep)
library(stats)
library(purrr)
library(ggplot2)
# 读取GeoJSON文件
london_lsoa <- st_read("data/london_lsoa.geojson")
# 读取CSV文件
csv_data <- read_csv("data/age_3grouped_0803.csv ")
# 合并sf对象和CSV数据
merged_data_lsoa <- left_join(london_lsoa, csv_data, by = c("LSOA21CD" = "LSOA_code"))
# 计算加权人口密度
# 提取几何中心点
centroids <- st_centroid(merged_data_lsoa)
# 提取中心点的坐标
coords <- st_coordinates(centroids)
# 定义高斯核函数
gaussian_kernel <- function(d, bw) {
exp(-0.5 * (d / bw)^2)
}
# 设置带宽
bandwidth <- 700
# 计算距离矩阵
dist_matrix <- as.matrix(dist(coords))
# 计算高斯权重矩阵
weight_matrix <- gaussian_kernel(dist_matrix, bandwidth)
# 获取人口列
population_all <- merged_data_lsoa$all
population_G1 <- merged_data_lsoa$G1
population_G2 <- merged_data_lsoa$G2
population_G3 <- merged_data_lsoa$G3
# 计算加权人口密度
weighted_density_all <- apply(weight_matrix, 1, function(w) sum(w * population_all) / sum(w))
weighted_density_G1 <- apply(weight_matrix, 1, function(w) sum(w * population_G1) / sum(w))
weighted_density_G2 <- apply(weight_matrix, 1, function(w) sum(w * population_G2) / sum(w))
weighted_density_G3 <- apply(weight_matrix, 1, function(w) sum(w * population_G3) / sum(w))
# 添加加权人口密度到数据框
merged_data_lsoa$weighted_density_all <- weighted_density_all
merged_data_lsoa$weighted_density_G1 <- weighted_density_G1
merged_data_lsoa$weighted_density_G2 <- weighted_density_G2
merged_data_lsoa$weighted_density_G3 <- weighted_density_G3
# 计算局部不相似指数
# 计算全市的种族比例
total_all <- sum(merged_data_lsoa$all, na.rm = TRUE)
total_G1 <- sum(merged_data_lsoa$G1, na.rm = TRUE)
total_G2 <- sum(merged_data_lsoa$G2, na.rm = TRUE)
total_G3 <- sum(merged_data_lsoa$G3, na.rm = TRUE)
tau_G1 <- total_G1 / total_all
tau_G2 <- total_G2 / total_all
tau_G3 <- total_G3 / total_all
# 计算正则化系数 I
I <- (tau_G1 * (1 - tau_G1) +
tau_G2 * (1 - tau_G2) +
tau_G3 * (1 - tau_G3))
# 计算局部不相似性指数的函数
calculate_local_d <- function(local_population, weighted_density_all,
weighted_density_G1, weighted_density_G2,
weighted_density_G3) {
tau_j_G1 <- weighted_density_G1 / weighted_density_all
tau_j_G2 <- weighted_density_G2 / weighted_density_all
tau_j_G3 <- weighted_density_G3 / weighted_density_all
local_d <- (local_population / (2 * total_all * I)) * (
abs(tau_j_G1 - tau_G1) +
abs(tau_j_G2 - tau_G2) +
abs(tau_j_G3 - tau_G3)
)
return(local_d)
}
# 使用 pmap 计算每行的 local_d_index
merged_data_lsoa <- merged_data_lsoa %>%
mutate(local_d_index = pmap_dbl(
list(all, weighted_density_all, weighted_density_G1, weighted_density_G2,
weighted_density_G3),
calculate_local_d
))
london_borough <- st_read("data/borough/London_Borough_Excluding_MHW.shp")
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_d_index), color = NA) +  # 去掉边界线
# 叠加 london_borough 的边界
geom_sf(data = london_borough, fill = NA, color = "black", size = 0.5) +
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
# 计算局部隔离指数
total_G1 <- sum(merged_data_lsoa$G1, na.rm = TRUE)
total_G2 <- sum(merged_data_lsoa$G2, na.rm = TRUE)
total_G3 <- sum(merged_data_lsoa$G3, na.rm = TRUE)
# 使用矢量化方法计算 local_q_G1
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_q_G1 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G1 / total_G1) * (weighted_density_G1 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_q_G2
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_q_G2 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G2 / total_G2) * (weighted_density_G2 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_q_G3
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_q_G3 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G3 / total_G3) * (weighted_density_G3 / weighted_density_all)
)
)
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_q_G1), color = NA) +  # 去掉边界线
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_q_G2), color = NA) +  # 去掉边界线
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_q_G3), color = NA) +  # 去掉边界线
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
# 计算局部暴露指数
# G1
total_G1 <- sum(merged_data_lsoa$G1, na.rm = TRUE)
# 使用矢量化方法计算 local_p_G1_G2
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G1_G2 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G1 / total_G1) * (weighted_density_G2 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G1_G3
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G1_G3 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G1 / total_G1) * (weighted_density_G3 / weighted_density_all)
)
)
# G2
total_G2 <- sum(merged_data_lsoa$G2, na.rm = TRUE)
# 使用矢量化方法计算 local_p_G2_G1
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G2_G1 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G2 / total_G2) * (weighted_density_G1 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G2_G3
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G2_G3 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G2 / total_G2) * (weighted_density_G3 / weighted_density_all)
)
)
# G3
total_G3 <- sum(merged_data_lsoa$G3, na.rm = TRUE)
# 使用矢量化方法计算 local_p_G3_G1
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G3_G1 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G3 / total_G3) * (weighted_density_G1 / weighted_density_all)
)
)
# 使用矢量化方法计算 local_p_G3_G2
merged_data_lsoa <- merged_data_lsoa %>%
mutate(
local_p_G3_G2 = if_else(
weighted_density_all == 0,
NA_real_,  # 如果 weighted_density_all 为 0，返回 NA
(G3 / total_G3) * (weighted_density_G2 / weighted_density_all)
)
)
df <- st_drop_geometry(merged_data_lsoa)
write_csv(df, "local_d_age.csv")
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_q_G1), color = NA) +  # 去掉边界线
# 叠加 london_borough 的边界
geom_sf(data = london_borough, fill = NA, color = "black", size = 0.5) +
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
# 绘图
ggplot(merged_data_lsoa) +
geom_sf(aes(fill = local_q_G3), color = NA) +  # 去掉边界线
# 叠加 london_borough 的边界
geom_sf(data = london_borough, fill = NA, color = "black", size = 0.5) +
scale_fill_gradient(low = "white", high = "red", name = "Local D Index") +  # 自定义颜色渐变
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.width = unit(2, "cm")
) +
labs(
title = "Local D Index Map",
subtitle = "Based on Calculated Local D Index Values"
)
library(sf)
library(readr)
library(dplyr)
library(spdep)
library(stats)
library(purrr)
library(ggplot2)
# 读取CSV文件
csv_data_ethic <- read_csv("data/clusters/local_d_ethic.csv")
csv_data_qualification <- read_csv("data/clusters/local_d_qualification.csv")
csv_data_nssec <- read_csv("data/clusters/local_d_nssec.csv")
csv_data_age <- read_csv("data/clusters/local_d_age.csv")
# 读取GeoJSON文件
london_lsoa <- st_read("data/london_lsoa.geojson")
# 根据 LSOA21CD 列进行合并
merged_df <- csv_data_ethic %>%
full_join(csv_data_qualification, by = "LSOA21CD") %>%
full_join(csv_data_nssec, by = "LSOA21CD") %>%
full_join(csv_data_age, by = "LSOA21CD")
# 合并sf对象和CSV数据
merged_data_lsoa <- left_join(london_lsoa, merged_df, by = c("LSOA21CD" = "LSOA21CD"))
library(sf)
library(cluster)
library(ggplot2)
# 从sf对象提取数值矩阵
data_for_clustering <- data.frame(
index_ethnic = merged_data_lsoa$local_d_index_ethic,
index_age = merged_data_lsoa$local_d_index_age,
index_education = merged_data_lsoa$local_d_index_qualification,
index_class = merged_data_lsoa$local_d_index_nssec
)
# 执行K-means聚类
set.seed(123)  # 设置随机种子以保证可复现性
num_clusters <- 5  # 设定聚类数目
kmeans_result <- kmeans(data_for_clustering, centers = num_clusters)
# 将聚类结果添加到sf对象
merged_data_lsoa$cluster <- factor(kmeans_result$cluster)
# 绘制聚类结果地图
ggplot(data = merged_data_lsoa) +
geom_sf(aes(fill = cluster), color = NA) +
scale_fill_viridis_d(option = "D") +
theme_minimal() +
labs(fill = "Cluster", title = "Spatial Clustering of LSOA in London based on Heterogeneity Indices")
# 计算每个聚类的描述性统计
stats_by_cluster <- merged_data_lsoa %>%
group_by(cluster) %>%
summarise(across(c(local_d_index_ethic, local_d_index_age, local_d_index_qualification, local_d_index_nssec), list(mean = mean, sd = sd)))
# 输出统计结果
print(stats_by_cluster)
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_age, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 设置聚类数范围
max_clusters <- 10
wcss <- numeric(max_clusters)
# 计算每个聚类数下的WCSS
for (i in 1:max_clusters) {
kmeans_result <- kmeans(data_for_clustering, centers = i)
wcss[i] <- kmeans_result$tot.withinss
}
# 绘制肘部图
plot(1:max_clusters, wcss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters",
ylab = "Total Within-Cluster Sum of Square (WCSS)",
main = "Elbow Method for Optimal Number of Clusters")
# 执行K-means聚类
set.seed(123)  # 设置随机种子以保证可复现性
num_clusters <- 4  # 设定聚类数目
kmeans_result <- kmeans(data_for_clustering, centers = num_clusters)
# 将聚类结果添加到sf对象
merged_data_lsoa$cluster <- factor(kmeans_result$cluster)
# 绘制聚类结果地图
ggplot(data = merged_data_lsoa) +
geom_sf(aes(fill = cluster), color = NA) +
scale_fill_viridis_d(option = "D") +
theme_minimal() +
labs(fill = "Cluster", title = "Spatial Clustering of LSOA in London based on Heterogeneity Indices")
# 计算每个聚类的描述性统计
stats_by_cluster <- merged_data_lsoa %>%
group_by(cluster) %>%
summarise(across(c(local_d_index_ethic, local_d_index_age, local_d_index_qualification, local_d_index_nssec), list(mean = mean, sd = sd)))
# 输出统计结果
print(stats_by_cluster)
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_age, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
View(merged_data_lsoa)
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_ethic, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_qualification, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_nssec, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_ethic, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_age, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_ethic, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of ethic Heterogeneity Index by Cluster",
x = "Cluster",
y = "Ethic Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_ethic, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of Ethic Heterogeneity Index by Cluster",
x = "Cluster",
y = "Ethic Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_qualification, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of Qualification Heterogeneity Index by Cluster",
x = "Cluster",
y = "Qualification Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_nssec, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of NS-SEC Heterogeneity Index by Cluster",
x = "Cluster",
y = "NS-SEC Heterogeneity Index")
# 可视化每个聚类的指数分布
ggplot(merged_data_lsoa, aes(x = cluster, y = local_d_index_age, fill = cluster)) +
geom_boxplot() +
labs(title = "Distribution of Age Heterogeneity Index by Cluster",
x = "Cluster",
y = "Age Heterogeneity Index")
file_path <- "data/ljy.csv"
data <- read.csv(file_path)
View(data)
View(data)
library(dplyr)
data <- data %>%
mutate_all(~ ifelse(. == "Very familiar", 3,
ifelse(. == "Sufficiently familiar", 2,
ifelse(. == "Not sufficiently familiar", 1,
ifelse(. == "Not familiar at all", 0, .)))))
data <- data %>%
mutate_all(~ ifelse(. == "Often", 2,
ifelse(. == "Once in a while", 1,
ifelse(. == "Never", 0, .))))
# 使用 mutate() 创建一个新的列存储分数
data <- data %>%
mutate(score =
(grepl("Promote my pupils' familiarity with the culture, the civilization of the countries where the language which they are learning is spoken.", multi_choice_col) +
grepl("Promote the acquisition of an open mind and a positive disposition towards unfamiliar cultures.", multi_choice_col) +
grepl("Assist my pupils in developing a better understanding of their own identity and culture.", multi_choice_col)))
colnames(data)
# 使用 mutate() 创建一个新的列存储分数
data <- data %>%
mutate(score =
(grepl("Promote my pupils' familiarity with the culture, the civilization of the countries where the language which they are learning is spoken.", X2.1.How.do.you.perceive.the.objectives.of.foreign.language.teaching.) +
grepl("Promote the acquisition of an open mind and a positive disposition towards unfamiliar cultures.", X2.1.How.do.you.perceive.the.objectives.of.foreign.language.teaching.) +
grepl("Assist my pupils in developing a better understanding of their own identity and culture.", X2.1.How.do.you.perceive.the.objectives.of.foreign.language.teaching.)))
write.csv(data, "ljy0903.csv", row.names = FALSE)
